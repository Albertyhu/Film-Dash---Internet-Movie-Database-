2/1/23
    form.addEventListener("submit", (event)=>{
        event.preventDefault(); 
        let encodedTitle = encodeURIComponent(titleInput.value)
        titleInput.value = encodedTitle;
        
        let encodedTagline = encodeURIComponent(taglineInput.value.replace(/[&<>"']/g, (match) => htmlEntities[match]))

        taglineInput.value = encodedTagline; 

        let encodedPcompanyInput = encodeURIComponent(PcompanyInput.value)
        PcompanyInput.value = encodedPcompanyInput;

        let encodedbudget = encodeURIComponent(budgetInput.value)
        budgetInput.value = encodedbudget;

        let encodedposter = encodeURIComponent(posterInput.value)
        posterInput.value = encodedposter;
        
        form.submit(); 
    });


1/28/23

//async.series method

const async = require('async');

const movieId = "5f9d7f6e8734f097e2c8ab6e";

async.series({
    movie: function(callback) {
        Movie.findById(movieId, callback);
    },
    directors: function(callback) {
        if(movie && Array.isArray(movie.director)){
            Director.find({ _id: { $in: movie.director } }, callback);
        }else if(movie){
            Director.findById(movie.director, callback);
        }else{
            callback(null, null);
        }
    }
}, function(err, results) {
    if (err) {
        console.log(err);
    } else {
        console.log(results.movie);
        console.log(results.directors);
    }
});


//waterfall method

const async = require('async');

const movieId = "5f9d7f6e8734f097e2c8ab6e";

async.waterfall([
    function(callback) {
        Movie.findById(movieId, callback);
    },
    function(movie, callback) {
        if(movie && Array.isArray(movie.director)){
            Director.find({ _id: { $in: movie.director } }, callback);
        }else if(movie){
            Director.findById(movie.director, callback);
        }else{
            callback(null, null);
        }
    }
], function(err, results) {
    if (err) {
        console.log(err);
    } else {
        console.log(results.movie);
        console.log(results.directors);
    }
});



1/26/23
Installed multer to allow the ability to upload files and images. 

1/24/23
How you choose which database you want to work with: 

The following code is how you connect with MongoDB with Mongoose:
const mongoose = require('mongoose')
const mongoDB = `mongodb+srv://${process.env.USER}:${process.env.PASS}@locallibrarycluster.lyfvtsg.mongodb.net/MovieRental?retryWrites=true&w=majority`
mongoose.connect(mongoDB, options)

If focus on this part of the mongoDB object, you will notice where the database name goes.
.mongodb.net/MovieRental?retryWrites=true&w=majority`

How models are named and created: 
After you define the models and connect with MongoDB database with mongoose, you will make the name all lower case letters and make it plural

module.exports = mongoose.model('Actor', ActorSchema)

This will create the collection 'actors' in the database. 

1/24/23 
I ran into issues of not being able to connect with MongoDB database.
I resolved the issue by creating a new user and password in MongoDB and writing the following line in app.js
require("dotenv").config();

Make sure to give the new user account the privilege to read and write any database.


1/23/23

Installed dotenv to hide password

1/23/23

How to use faker: 

const faker = require('faker');

const randomStatus = faker.random.arrayElement(["Available", "Maintenance", "Loaned", "Reserved"]);
const randomDate = faker.date.between('2020-01-01', '2022-01-01');

const exampleInstance = await MovieInstance.create({
  movie: exampleMovie._id,
  status: randomStatus,
  dateAvailable: randomDate,
});


MongoDB Database
username: Garth_Gamez@usa.com